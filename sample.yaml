# Example goappgen config with all possible features and options
# To generate your app(s), run:
#   goappgen generate -c sample.yaml -o ./output --sync-go-mod
# All generated apps will be in output/apps/<appname>/, even for a single app.
# The --sync-go-mod flag will run 'go mod download && go mod tidy' (single-app) or 'go work sync' (multi-app) after generation.
app:
  - name: inventory-service
    desc: Inventory microservice
    # --- Transport Layer ---
    transport:
      http: gin         # Options: gin, echo, chi, fiber
      grpc: false        # Enable gRPC server (true/false)
    # --- Logger ---
    logger:
      type: slog        # Options: slog, zap, zerolog, logrus
      output: std       # Options: std, file, both
    # --- Config Provider ---
    config:
      type: viper       # Options: viper, envconfig
    # --- CLI ---
    cli:
      cobra: true       # Use Cobra CLI (true/false)
    # --- Auth ---
    auth:
      type: jwt         # Options: jwt, casbin, jwks, goth, authboss
    # --- Database ---
    database:
      type: postgres    # Options: postgres, sqlite, mongo, mysql, mariadb
      orm: sqlc         # Options: gorm, pgx, sqlc, none
      cqrs: true        # Enable CQRS pattern (true/false)
      migrations: true  # Enable DB migrations (true/false)
    # --- Storage (S3/MinIO) ---
    storage:
      type: s3              # Options: s3, minio, none
      endpoint: http://minio:9000  # S3/MinIO endpoint
      access_key: minio     # S3/MinIO access key
      secret_key: minio123  # S3/MinIO secret key
      bucket: mybucket      # S3/MinIO bucket name
      region: us-east-1     # S3/MinIO region
      use_ssl: false        # Use SSL (true/false)
    # --- Observability ---
    observability:
      metrics:
        enabled: true
        type: prometheus   # Options: prometheus, none
      tracing:
        enabled: true
        type: otel         # Options: otel, jaeger, none
      logs: loki            # Options: loki, none
    # --- Middlewares ---
    middlewares:
      logging:
        enabled: true
      cors:
        enabled: true
        allow_origins: ["*"]
        allow_methods: ["GET", "POST", "PUT", "DELETE"]
        allow_headers: ["Authorization", "Content-Type"]
      ratelimiter:
        enabled: true
        requests_per_second: 10
        burst: 20
      exception_handler:
        enabled: true
      record_metrics:
        enabled: true
      options:
        enabled: true
    # --- Dev Tools ---
    devtools:
      kubernetes: true        # Enable Kubernetes manifests
      docker_compose: false   # Set to true to generate both k8s and docker-compose
      docker: true             # Include Dockerfile (true/false)
      air: true                # Include Air live reload config (true/false)
      makefile: true           # Include Makefile (true/false)
      precommit: true          # Include pre-commit hooks (true/false)
      swagger: true            # Enable Swagger/Swaggo docs
